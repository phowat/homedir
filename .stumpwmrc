;; -*- lisp -*- 
;; vim: set filetype=lisp:

(in-package :stumpwm)
(require 'swank)

;; switch to intl keyboard layot, remap my Caps Lock as CTRL 
(run-shell-command (concatenate 'string "/usr/bin/setxkbmap us -variant intl && "
                                        "/usr/bin/xmodmap -e 'keycode 66 = Control_L' && "
                                        "/usr/bin/xmodmap -e 'clear Lock' && "
                                        "/usr/bin/xmodmap -e 'add Control = Control_L'"))

;; stuff I don't want to run again on reloads
(defun startup-only ()
  (defvar *startup-only-initialized*)
  (if (boundp '*initialized*)
      (message "Already initialized, so skipping X setup.")
      (progn
  ;;      (run-shell-command "trayer --SetDockType false --transparent false --SetPartialStrut --widthtype --expand false --width 50")
  ;;      (run-shell-command "nm-applet --sm-disable")
  ;;      (run-shell-command "xscreensaver &")
        (swank:create-server)
        (grename "1")
        (gnew "2")
        (gnew "3")
        (gnew "4")
        (gnew "5")
        (gnew "6")
        (gnext)
        (stumpwm:toggle-mode-line (stumpwm:current-screen) (stumpwm:current-head))
        (run-shell-command "/usr/bin/feh --bg-max /home/pedro/wallpapers/727609.jpg")
        (run-shell-command "/bin/sh -c google-chrome")
        (run-shell-command "gnome-terminal -e tmux")
        (setq *startup-only-initialized* t))))
 

(set-prefix-key (kbd "C-i"))

(setf *mode-line-background-color* "Black"
      *mode-line-foreground-color* "Magenta"
      *mode-line-border-color*     "Magenta"
      *mode-line-timeout*          1
      *mode-line-screen-position* :top)
;;      *window-format* "<%n%s%m%30t>"
;;      *screen-mode-line-format*  
;;     (list "[%w]   | "
;;      '(:eval (run-shell-command "ifconfig|grep inet|awk '{print $3}'|head -1 " t))))
(stumpwm:toggle-mode-line (stumpwm:current-screen) (stumpwm:current-head))
(stumpwm:toggle-mode-line (stumpwm:current-screen) (stumpwm:current-head))

(startup-only)

(defcommand triple-gnext () () (gnext) (gnext) (gnext))
(defcommand triple-gprev () () (gprev) (gprev) (gprev))

(define-key *top-map* (kbd "C-M-l") "gnext")
(define-key *top-map* (kbd "C-M-h") "gprev")
(define-key *top-map* (kbd "C-M-k") "triple-gprev")
(define-key *top-map* (kbd "C-M-j") "triple-gnext")
