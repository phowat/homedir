;; -*- lisp -*- 
;; vim: set filetype=lisp:

;; TODO: 
;; Randomly assign a wallpaper when set-wallpaper is called without a filepath
;; Figure our how to use define-frame-preference

(in-package :stumpwm)
(if (not (boundp '*startup-only-initialized*)) (require 'swank))

(defun is-workstation () (equal (machine-instance) "iv-pedro-ws-01"))

;; During the inital load, if I don't wait those 5 seconds on my workstation, it doesn't run (setup-keyboard) correctly.
(if (and (is-workstation) (not (boundp '*startup-only-initialized*))) (sleep 5))

(set-prefix-key (kbd "C-i"))

;; stuff I only use at work.
(defun startup-only-ws ()
  (firefox)
  (run-shell-command "xterm /home/pedro/Code/uowm/uowmcli.sh")
  (run-shell-command "rescuetime")
  (run-shell-command "gnome-terminal --tab-with-profile=solarized-transparent"))

;; stuff I don't want to run again on reloads
(defun startup-only ()
  (defvar *startup-only-initialized*)
  (if (boundp '*startup-only-initialized*)
      (message "Already initialized, so skipping X setup.")
      (progn
        (run-shell-command "trayer --SetDockType false --transparent false --SetPartialStrut --widthtype --expand false --width 50")
        (run-shell-command "nm-applet --sm-disable")
        (run-shell-command "gnome-sound-applet")
        (run-shell-command "xscreensaver &")
        (swank:create-server)
        (create-groups)
        (set-wallpaper "/home/pedro/wallpapers/727609.jpg")
        (chrome)
        (gnome-terminal "-e tmux")
        (dropbox "start")
        (if (is-workstation) (startup-only-ws))
        (setq *startup-only-initialized* t))))
 
;; Volume control commands
(defun amixer-set-master (set-to)
  "Uses amixer to set Master, echoing that part of the response that includes the volume."
  (message 
    (run-shell-command 
      (concatenate 'string "amixer set Master " set-to " | grep '\[*%\]'") t)))

(defcommand raise-volume () ()
  "Raise volume via amixer"
  (amixer-set-master "1+"))

(defcommand lower-volume () ()
  "Lower volume via amixer"
  (amixer-set-master "1-"))

;;(defcommand toggle-mute-volume () ()
;;  "Toggle volume mute via amixer"
;;  (amixer-set-master "toggle"))
;;

;; Application startup commands
(defcommand chrome () ()
  "Start browser or switch to it, if it is already running."
  (run-or-raise "google-chrome" '(:instance "chrome")))

(defcommand gnome-terminal (&optional arg) (:string)
  "Start or go to the closest gnome-terminal"
  (run-or-raise (concatenate 'string "gnome-terminal " arg) '(:instance "gnome-terminal")))

(defcommand firefox () ()
  "run firefox"
  (run-or-raise "firefox" '(:class "Firefox")))

(defcommand setup-keyboard () ()
  "switch to intl keyboard layot, remap my Caps Lock as CTRL"
  (run-shell-command (concatenate 'string "/usr/bin/setxkbmap us -variant intl && "
                                          "/usr/bin/xmodmap -e 'keycode 66 = Control_L' && "
                                          "/usr/bin/xmodmap -e 'clear Lock' && "
                                          "/usr/bin/xmodmap -e 'add Control = Control_L'")))

;; Power controls 
(defcommand poweroff () () (run-shell-command "sudo poweroff"))
(defcommand reboot () () (run-shell-command "sudo reboot"))
(defcommand suspend () () (run-shell-command "sudo pm-suspend"))
(defcommand hibernate () () (run-shell-command "sudo pm-hibernate"))

;; Group navigation
(defcommand triple-gnext () () (gnext) (gnext) (gnext))
(defcommand triple-gprev () () (gprev) (gprev) (gprev))

;; Misc 
(defcommand lock-screen () () (run-shell-command "xscreensaver-command -lock"))

(defcommand create-groups () ()
  "My default 6 groups setup"
  (grename "1")
  (gnew "2")
  (gnew "3")
  (gnew "4")
  (gnew "5")
  (gnew-float "6")
  (gnext))

(defcommand battery-info () () (echo (run-shell-command "acpi -V | head -n 1" t)))

(defcommand set-wallpaper (x) ((:string))
  (run-shell-command (concatenate 'string "/usr/bin/feh --bg-max " x)))

(defcommand dropbox (action) ((:string))
  (echo (run-shell-command (concatenate 'string "/usr/bin/dropbox " action) t)))

(defcommand sflphoned () () (run-shell-command "/usr/lib/sflphone/sflphoned"))
(defcommand sflphonec () () (run-shell-command "sflphone-client-gnome"))
(defcommand sflphone () () (sflphoned) (sflphonec))

;; Custom key mappings
(define-key *top-map* (kbd "M-TAB") "next")
(define-key *top-map* (kbd "M-ISO_Left_Tab") "prev")
(define-key *top-map* (kbd "C-M-l") "gnext")
(define-key *top-map* (kbd "C-M-h") "gprev")
(define-key *top-map* (kbd "C-M-k") "triple-gprev")
(define-key *top-map* (kbd "C-M-j") "triple-gnext")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "raise-volume")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "lower-volume")
;;(define-key *top-map* (kbd "XF86AudioMute") "toggle-mute-volume")
(define-key *root-map* (kbd "B") "battery-info")
(define-key *root-map* (kbd "L") "lock-screen")
(define-key *root-map* (kbd "c")  "exec gnome-terminal")
(define-key *root-map* (kbd "C-c") "chrome")
(define-key *root-map* (kbd "C-f") "firefox")
(define-key *root-map* (kbd "C-t") "gnome-terminal")

;;  Mode line
(setf *mode-line-background-color* "Black"
      *mode-line-foreground-color* "Magenta"
      *mode-line-border-color*     "Magenta"
      *mode-line-timeout*          1
      *mode-line-screen-position* :top)
;;      *window-format* "<%n%s%m%30t>"
;;      *screen-mode-line-format*  
;;     (list "[%w]   | "
;;      '(:eval (run-shell-command "ifconfig|grep inet|awk '{print $3}'|head -1 " t))))

;; This makes sure my mode line is always refreshed when I reload my configurations
(stumpwm:toggle-mode-line (stumpwm:current-screen) (stumpwm:current-head))
(stumpwm:enable-mode-line (stumpwm:current-screen) (stumpwm:current-head) t)

(setup-keyboard)
(startup-only)
