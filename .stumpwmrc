;; -*- lisp -*- 
;; vim: set filetype=lisp:

(in-package :stumpwm)
(if (boundp '*startup-only-initialized*)
    (message "Already initialized, so skipping X setup.")
    (require 'swank))

(defun setup-kbd () 
  "switch to intl keyboard layot, remap my Caps Lock as CTRL"
  (run-shell-command (concatenate 'string "/usr/bin/setxkbmap us -variant intl && "
                                          "/usr/bin/xmodmap -e 'keycode 66 = Control_L' && "
                                          "/usr/bin/xmodmap -e 'clear Lock' && "
                                          "/usr/bin/xmodmap -e 'add Control = Control_L'")))
(defun create-grps ()
  (grename "1")
  (gnew "2")
  (gnew "3")
  (gnew "4")
  (gnew "5")
  (gnew-float "6")
  (gnext))

(defcommand chrome () ()
  "Start browser or switch to it, if it is already running."
  (run-or-raise "google-chrome" '(:instance "chrome")))

;; stuff I don't want to run again on reloads
(defun startup-only ()
  (defvar *startup-only-initialized*)
  (if (boundp '*startup-only-initialized*)
      (message "Already initialized, so skipping X setup.")
      (progn
        (run-shell-command "trayer --SetDockType false --transparent false --SetPartialStrut --widthtype --expand false --width 50")
        (run-shell-command "nm-applet --sm-disable")
        (run-shell-command "gnome-sound-applet")
        (run-shell-command "xscreensaver &")
        (swank:create-server)
        (create-grps)
        (run-shell-command "/usr/bin/feh --bg-max /home/pedro/wallpapers/727609.jpg")
        (chrome)
        (run-shell-command "gnome-terminal -e tmux")
        (setq *startup-only-initialized* t))))
 
(defun amixer-set-master (set-to)
  "Uses amixer to set Master, echoing that part of the response that includes the volume."
  (message
   (run-shell-command
    (concatenate 'string "amixer set Master " set-to " | grep '\[*%\]'")
    t)))

(setup-kbd)

(defcommand setup-keyboard () ()
  (setup-kbd))

(defcommand create-groups () ()
  "My default 6 groups setup"
  (create-grps))

(defcommand raise-volume () ()
  "Raise volume via amixer"
  (amixer-set-master "1+"))

(defcommand lower-volume () ()
  "Lower volume via amixer"
  (amixer-set-master "1-"))

(defcommand lock-screen () ()
  (run-shell-command "xscreensaver-command -lock"))

(defcommand poweroff () ()
  (run-shell-command "sudo poweroff"))

(defcommand reboot () ()
  (run-shell-command "sudo reboot"))

(defcommand suspend () ()
  (run-shell-command "sudo pm-suspend"))

(defcommand hibernate () ()
  (run-shell-command "sudo pm-hibernate"))

;;(defcommand toggle-mute-volume () ()
;;  "Toggle volume mute via amixer"
;;  (amixer-set-master "toggle"))
;;
(set-prefix-key (kbd "C-i"))

(setf *mode-line-background-color* "Black"
      *mode-line-foreground-color* "Magenta"
      *mode-line-border-color*     "Magenta"
      *mode-line-timeout*          1
      *mode-line-screen-position* :top)
;;      *window-format* "<%n%s%m%30t>"
;;      *screen-mode-line-format*  
;;     (list "[%w]   | "
;;      '(:eval (run-shell-command "ifconfig|grep inet|awk '{print $3}'|head -1 " t))))
(stumpwm:toggle-mode-line (stumpwm:current-screen) (stumpwm:current-head))
(stumpwm:enable-mode-line (stumpwm:current-screen) (stumpwm:current-head) t)
;;(stumpwm:toggle-mode-line (stumpwm:current-screen) (stumpwm:current-head))

(startup-only)

(defcommand triple-gnext () () (gnext) (gnext) (gnext))
(defcommand triple-gprev () () (gprev) (gprev) (gprev))
(defcommand battery-info () () 
  (echo (run-shell-command "acpi -V | head -n 1" t)))

(define-key *top-map* (kbd "C-M-l") "gnext")
(define-key *top-map* (kbd "C-M-h") "gprev")
(define-key *top-map* (kbd "C-M-k") "triple-gprev")
(define-key *top-map* (kbd "C-M-j") "triple-gnext")

(define-key *top-map* (kbd "XF86AudioRaiseVolume") "raise-volume")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "lower-volume")
;;(define-key *top-map* (kbd "XF86AudioMute") "toggle-mute-volume")

(define-key *root-map* (kbd "B") "battery-info")
(define-key *root-map* (kbd "L") "lock-screen")

(define-key *root-map* (kbd "c")  "exec gnome-terminal")
(define-key *root-map* (kbd "C-c") "exec gnome-terminal")


;;(defcommand firefox () ()
;;  "run firefox"
;;  (run-or-raise "firefox" '(:class "Firefox")))

(define-key *root-map* (kbd "C") "chrome")
